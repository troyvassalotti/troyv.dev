<style>
  body:not(:is(.page--foobar)) .header__container {
    margin-block-end: 2em;
  }

  .header__container {
    display: flex;
  }

  .c-mainNavigation {
    font-size: var(--step--1);
    flex: 1;
    padding: 1ch;
  }

  .c-mainNavigation ul {
    display: flex;
    flex-wrap: wrap;
    margin: 0;
  }

  .c-mainNavigation li:first-of-type {
    inline-size: 100%;
    margin-block-end: 1ch;
  }

  .c-mainNavigation li:not(:last-of-type) {
    margin-inline-end: 1ch;
  }

  .c-mainNavigation a {
    color: currentColor;
    text-decoration: none;
  }

  .skipLink {
    inset-inline-start: 50%;
    padding: 4px;
    position: absolute;
    transform: translateY(-200%);
    transition: transform 0.3s;
  }

  .skipLink:focus-visible {
    transform: translateY(0%);
  }

  .settings__button {
		color: var(--links);
		display: block;
		text-decoration: underline;
	}

  .themeSelector__button {
    align-self: start;
    padding: var(--space-xs);
  }

  .theme__field {
    display: flex;
    flex-direction: column;
  }

  .theme__field label {
    font-weight: bold;
  }

  .settings__buttons {
    display: flex;
    justify-content: space-between;
  }

  @media (prefers-reduced-motion: no-preference) {
    .c-mainNavigation a::before {
      --linkStartRest: right;
      --linkStateRest: scaleX(0);
    }

    .c-mainNavigation a:hover::before {
      --linkStartHover: left;
      --linkStateHover: scaleX(1);
    }

    #link__home::before {
      background-color: currentColor;
    }

    #link__posts::before {
      background-color: currentColor;
    }

    #link__music::before {
      background-color: currentColor;
    }

    #link__work::before {
      background-color: currentColor;
    }

    #link__about::before {
      background-color: currentColor;
    }

    a[aria-current="page"]::before {
      --linkStartRest: left;
      --linkStateRest: scaleX(1);
    }

    a[aria-current="page"]:hover::before {
      --linkStartHover: right;
      --linkStateHover: scaleX(0);
    }
  }
</style>
<div class="header__container">
  <nav class="c-mainNavigation" id="mainNavigation" aria-label="main">
    <a class="skipLink" href="#main">Skip to main content</a>
    <ul role="list">
      {% for link in nav.header %}
        <li>
          <a href="{{ link.url }}" class="c-animatedLink" {{ "aria-current=page" if link.url === page.url }} id="link__{{ link.name }}">{%- if loop.first -%}~/{%- else -%}::
          {% endif -%}
        {{ link.name }}</a>
      </li>
    {% endfor %}
  </ul>
</nav>
<button id="settings" class="themeSelector__button">{% include "partials/settings.svg" %}</button>
<modal-menu>
<p class="u-step-2 u-text--bold" slot="title">Site Settings</p>
<theme-selector></theme-selector>
</modal-menu>
<dialog class="modal flow" id="settingsMenu">
  <div class="settings__buttons">
    <button id="themeReset" class="settings__button u-step--1">Reset Theme</button>
    <button id="settingsDismiss" class="settings__button u-step--1">Dismiss</button>
  </div>
</dialog>
</div>
<script type="module">
  import "/assets/js/theme-selector.js";
  const THEME_HUE = document.getElementById("theme-hue");
  THEME_HUE.addEventListener("input", (e) => {
      const VALUE = e.target.value;
      document.documentElement.style.setProperty("--base-hue", VALUE);
      localStorage.setItem("theme-base-hue", VALUE);
  });

  const THEME_SATURATION = document.getElementById("theme-saturation");
  THEME_SATURATION.addEventListener("input", (e) => {
      const VALUE = `${e.target.value}%`;
      document.documentElement.style.setProperty("--base-sat", VALUE);
      localStorage.setItem("theme-base-saturation", e.target.value);
  });

  const SETTINGS_MODAL = document.getElementById("settingsMenu");
  const SETTINGS_BUTTON = document.getElementById("settings");
  SETTINGS_BUTTON.addEventListener("click", (e) => {
    SETTINGS_MODAL.showModal();
  });

  const SETTINGS_DISMISS = document.getElementById("settingsDismiss");
  SETTINGS_DISMISS.addEventListener("click", (e) => {
    SETTINGS_MODAL.close();  
  });

  const THEME_RESET = document.getElementById("themeReset");
  THEME_RESET.addEventListener("click", resetTheme);

  function resetTheme() {
      document.documentElement.style.removeProperty("--base-hue");
      document.documentElement.style.removeProperty("--base-sat");
      localStorage.removeItem("theme-base-hue");
      localStorage.removeItem("theme-base-saturation");
      THEME_HUE.value = undefined;
      THEME_SATURATION.value = undefined;
  }

  (function() {
    if (localStorage.getItem("theme-base-hue")) {
      document.documentElement.style.setProperty("--base-hue", localStorage.getItem("theme-base-hue"));
      THEME_HUE.value = localStorage.getItem("theme-base-hue");
    }

    if (localStorage.getItem("theme-base-saturation")) {
      document.documentElement.style.setProperty("--base-sat", localStorage.getItem("theme-base-saturation") + "%");
      THEME_SATURATION.value = localStorage.getItem("theme-base-saturation");
    }
  })();
</script>
